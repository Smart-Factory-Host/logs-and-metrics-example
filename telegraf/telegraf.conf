[global_tags]
[agent]
hostname = "telegraf"
omit_hostname = true

[[inputs.nats_consumer]]
    servers = ["${NATS}"]
    subjects = ["sponsor.${SPONSORID}.sfh.${SFHID}.provider.${PROVIDERID}.app.${APPID}.logs.>"]
    username = "openid"
    password = "${TOKEN}"
    data_format = "logfmt"

[[inputs.nats_consumer]]
    servers = ["${NATS}"]
    subjects = ["sponsor.${SPONSORID}.sfh.${SFHID}.provider.${PROVIDERID}.app.${APPID}.metrics.>"]
    username = "openid"
    password = "${TOKEN}"
    data_format = "influx"


[[processors.regex]]
    [[processors.regex.tags]]
        key = "subject"
        pattern = "^sponsor\\.\\d+\\.sfh\\.\\d+\\.provider\\.\\w+\\.app\\.\\d+\\.(logs|metrics)[\\.\\w]*$"
        replacement = "$${1}"
        result_key = "type"

[[processors.starlark]]
    namepass = ["*"]  
    source = '''
load('time.star', 'time')

## Use this for debugging with log.info(<log>)
#load('logging.star', 'log')
def apply(metric):
    if metric.tags["type"] == "logs":   

        metric.name = "logs"

        # delete all tags which have been automatically added by the inputs.nats_consumer plugin
        metric.tags.clear()

        # save message field als log_line variable
        log_line = metric.fields["message"]

        # delete message field
        metric.fields.pop("message")

        # set timestamp to timestamp of log
        logTimestamp = metric.fields.get("timestamp")
        unixTimeStampInNanoSeconds = time.parse_time(logTimestamp[:-1], format="2006-01-02T15:04:05.999999999").unix_nano
        metric.time  = unixTimeStampInNanoSeconds

        # Insert fields als labels and delete them from the fields property
        for k,v in metric.fields.items():
                if k != "timestamp":
                    metric.tags[k] = str(v)
                metric.fields.pop(k)

        metric.fields["log"] = log_line

    metric.tags["type"] = "logs"
    return metric
    '''


[[outputs.influxdb]]
    urls = ["http://influxdb:8086"]
    database = "influx"
    username = "org-admin"
    password = "password"
    [outputs.influxdb.tagpass]
        type = ["metrics"]

# [[outputs.lokilogs]]
#     domain = "http://loki:3100"
#     [outputs.lokilogs.tagpass]
#         type = ["logs"]

[[outputs.loki]]
    domain = "http://loki:3100"
    sanitize_label_names = true
    [outputs.loki.tagpass]
        type = ["logs"]

## Use this to log the output into the console
# [[outputs.file]]
#     files = ["stdout"]
#     [outputs.file.tagpass]
#         type = ["metrics", "logs"]